{
	"info": {
		"_postman_id": "9cf05d4b-919e-4aa5-b328-753bd14208b7",
		"name": "ServeRest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27209089"
	},
	"item": [
		{
			"name": "usuarios",
			"item": [
				{
					"name": "Cadastrar usuário",
					"item": [
						{
							"name": "CT_001: Realizar cadastro como administrador válido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomExampleEmail}}\",\r\n  \"password\": \"{{validPassword}}\",\r\n  \"administrador\": \"true\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/usuarios",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT_002: Realizar cadastro como usuário comum válido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomExampleEmail}}\",\r\n  \"password\": \"{{validPassword}}\",\r\n  \"administrador\": \"false\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/usuarios",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT_003: Realizar cadastro com nome em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"nome não pode ficar em branco\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"\",\r\n  \"email\": \"{{$randomExampleEmail}}\",\r\n  \"password\": \"{{validPassword}}\",\r\n  \"administrador\": \"false\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/usuarios",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT_004: Realizar cadastro com e-mail em branco",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"email não pode ficar em branco\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"\",\r\n  \"password\": \"{{validPassword}}\",\r\n  \"administrador\": \"false\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/usuarios",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT_005: Realizar cadastro com password em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"password não pode ficar em branco\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomExampleEmail}}\",\r\n  \"password\": \"\",\r\n  \"administrador\": \"false\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/usuarios",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT_006: Realizar cadastro com administrador em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"administrador deve ser 'true' ou 'false'\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomExampleEmail}}\",\r\n  \"password\": \"{{validPassword}}\",\r\n  \"administrador\": \"\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/usuarios",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT_007: Realizar cadastro com e-mail inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"email deve ser um email válido\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomUserName}}.com\",\r\n  \"password\": \"{{validPassword}}\",\r\n  \"administrador\": \"false\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/usuarios",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT_008: Realizar cadastro com e-mail já cadastrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Este email já está sendo usado\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{adminEmail}}\",\r\n  \"password\": \"{{validPassword}}\",\r\n  \"administrador\": \"false\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/usuarios",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT_009: Realizar cadastro com provedor de e-mail Hotmail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Não é possível realizar cadastro com provedor de e-mail Hotmail\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomUserName}}@hotmail.com\",\r\n  \"password\": \"{{validPassword}}\",\r\n  \"administrador\": \"false\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/usuarios",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT_010: Realizar cadastro com provedor de e-mail Gmail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Não é possível realizar cadastro com provedor de e-mail Gmail\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomUserName}}@gmail.com\",\r\n  \"password\": \"{{validPassword}}\",\r\n  \"administrador\": \"false\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/usuarios",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT_011: Realizar cadastro com senha < 5 caracteres",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const password = pm.variables.replaceIn('{{$randomPassword}}').slice(0, 4);\r",
											"pm.collectionVariables.set(\"longPassword\", password);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"A senha deve ter no mínimo 5 caracteres\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomExampleEmail}}\",\r\n  \"password\": \"{{shortPassword}}\",\r\n  \"administrador\": \"false\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/usuarios",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT_012: Realizar cadastro com senha > 10 caracteres",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const password = pm.variables.replaceIn('{{$randomPassword}}').slice(0, 11);\r",
											"pm.collectionVariables.set(\"longPassword\", password);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"A senha deve ter no máximo 10 caracteres\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomExampleEmail}}\",\r\n  \"password\": \"{{longPassword}}\",\r\n  \"administrador\": \"false\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/usuarios",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Listar usuários cadastrados",
					"item": [
						{
							"name": "CT_013: Obter uma lista de usuários",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checks the response body\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.quantidade).to.be.a('number');\r",
											"    pm.expect(jsonData.usuarios).lengthOf(jsonData.quantidade);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "{_id}",
					"item": [
						{
							"name": "Buscar usuário por ID",
							"item": [
								{
									"name": "CT_014: Buscar um usuário válido",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Checks the response body\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.nome).to.equal(pm.collectionVariables.get('randomName'));\r",
													"    pm.expect(jsonData.email).to.equal(pm.collectionVariables.get('randomEmail'));\r",
													"    pm.expect(jsonData.password).to.equal(pm.collectionVariables.get('validPassword'));\r",
													"    pm.expect(jsonData.administrador).not.null;\r",
													"    pm.expect(jsonData._id).to.equal(pm.collectionVariables.get('newUserId'));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usuarios/:_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usuarios",
												":_id"
											],
											"variable": [
												{
													"key": "_id",
													"value": "{{newUserId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CT_015: Buscar um usuário inexistente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Usuário não encontrado\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usuarios/:_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usuarios",
												":_id"
											],
											"variable": [
												{
													"key": "_id",
													"value": "{{$randomPassword}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const name = pm.variables.replaceIn('{{$randomFullName}}');",
											"pm.collectionVariables.set(\"randomName\", name);",
											"const email = pm.variables.replaceIn('{{$randomExampleEmail}}');",
											"pm.collectionVariables.set(\"randomEmail\", email);",
											"",
											"pm.sendRequest({",
											"    url: pm.environment.get('baseUrl') + '/usuarios',",
											"    method: 'POST',",
											"    header: {",
											"        'Accept': 'application/json',",
											"        'Content-Type': 'application/json'",
											"      },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"nome\": pm.collectionVariables.get('randomName'),",
											"            \"email\": pm.collectionVariables.get('randomEmail'),",
											"            \"password\": pm.collectionVariables.get('validPassword'),",
											"            \"administrador\": \"false\"",
											"        })",
											"    }",
											"}, function (err, res) {",
											"    pm.collectionVariables.set(\"newUserId\", res.json()._id);",
											"});",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Excluir usuário",
							"item": [
								{
									"name": "CT_016: Deletar usuário válido",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usuarios/:_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usuarios",
												":_id"
											],
											"variable": [
												{
													"key": "_id",
													"value": "{{newUserId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CT_017: Deletar usuário inexistente",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Nenhum registro excluído\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usuarios/:_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usuarios",
												":_id"
											],
											"variable": [
												{
													"key": "_id",
													"value": "{{$randomPassword}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CT_018: Deletar usuário com carrinho ativo",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.environment.get('baseUrl') + '/login',\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"email\": pm.collectionVariables.get('randomEmail'),\r",
													"            \"password\": pm.collectionVariables.get('validPassword')\r",
													"        })\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.error(err);\r",
													"        return;\r",
													"    }\r",
													"\r",
													"    pm.collectionVariables.set('token', res.json().authorization);\r",
													"\r",
													"    pm.sendRequest({\r",
													"        url: pm.environment.get('baseUrl') + '/carrinhos', \r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'Accept': 'application/json',\r",
													"            'Content-Type': 'application/json',\r",
													"            'Authorization': pm.collectionVariables.get('token')\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'raw',\r",
													"            raw: JSON.stringify({\r",
													"                \"produtos\": [{\r",
													"                    \"idProduto\": pm.collectionVariables.get('defaultProductId'),\r",
													"                    \"quantidade\": 1\r",
													"                }]\r",
													"            })\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) {\r",
													"            console.error(err);\r",
													"            return;\r",
													"        }\r",
													"\r",
													"        console.log(res.json());\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Não é permitido excluir usuário com carrinho cadastrado\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usuarios/:_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usuarios",
												":_id"
											],
											"variable": [
												{
													"key": "_id",
													"value": "{{newUserId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const name = pm.variables.replaceIn('{{$randomFullName}}');",
											"pm.collectionVariables.set(\"randomName\", name);",
											"const email = pm.variables.replaceIn('{{$randomExampleEmail}}');",
											"pm.collectionVariables.set(\"randomEmail\", email);",
											"",
											"pm.sendRequest({",
											"    url: pm.environment.get('baseUrl') + '/usuarios',",
											"    method: 'POST',",
											"    header: {",
											"        'Accept': 'application/json',",
											"        'Content-Type': 'application/json'",
											"      },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"nome\": pm.collectionVariables.get('randomName'),",
											"            \"email\": pm.collectionVariables.get('randomEmail'),",
											"            \"password\": pm.collectionVariables.get('validPassword'),",
											"            \"administrador\": \"false\"",
											"        })",
											"    }",
											"}, function (err, res) {",
											"    pm.collectionVariables.set(\"newUserId\", res.json()._id);",
											"});",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Editar usuário",
							"item": [
								{
									"name": "Usuário válido",
									"item": [
										{
											"name": "CT_019: Atualizar usuário válido",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomExampleEmail}}\",\r\n  \"password\": \"{{validPassword}}\",\r\n  \"administrador\": \"true\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/usuarios/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{newUserId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_020: Atualizar usuário válido com nome em branco",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"nome não pode ficar em branco\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"nome\": \"\",\r\n  \"email\": \"{{$randomExampleEmail}}\",\r\n  \"password\": \"{{validPassword}}\",\r\n  \"administrador\": \"true\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/usuarios/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{newUserId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_021: Atualizar usuário válido com e-mail em branco",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"email não pode ficar em branco\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"\",\r\n  \"password\": \"{{validPassword}}\",\r\n  \"administrador\": \"true\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/usuarios/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{newUserId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_022: Atualizar usuário válido com password em branco",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"password não pode ficar em branco\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomExampleEmail}}\",\r\n  \"password\": \"\",\r\n  \"administrador\": \"true\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/usuarios/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{newUserId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_023: Atualizar usuário válido com administrador em branco",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"administrador deve ser 'true' ou 'false'\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomExampleEmail}}\",\r\n  \"password\": \"{{validPassword}}\",\r\n  \"administrador\": \"\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/usuarios/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{newUserId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_024: Atualizar usuário válido com e-mail inválido",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"email deve ser um email válido\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomUserName}}.com\",\r\n  \"password\": \"{{validPassword}}\",\r\n  \"administrador\": \"true\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/usuarios/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{newUserId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_025: Atualizar usuário válido com e-mail já cadastrado",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Este email já está sendo usado\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{adminEmail}}\",\r\n  \"password\": \"{{validPassword}}\",\r\n  \"administrador\": \"true\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/usuarios/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{newUserId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_026: Atualizar usuário válido com Hotmail",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Não é possível realizar cadastro com provedor de e-mail Hotmail\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomUserName}}@hotmail.com\",\r\n  \"password\": \"{{validPassword}}\",\r\n  \"administrador\": \"true\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/usuarios/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{newUserId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_027: Atualizar usuário válido com Gmail",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Não é possível realizar cadastro com provedor de e-mail Gmail\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomUserName}}@gmail.com\",\r\n  \"password\": \"{{validPassword}}\",\r\n  \"administrador\": \"true\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/usuarios/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{newUserId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_028: Atualizar usuário válido com senha < 5 caracteres",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const password = pm.variables.replaceIn('{{$randomPassword}}').slice(0, 4);\r",
															"pm.collectionVariables.set(\"longPassword\", password);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"A senha deve ter no mínimo 5 caracteres\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomExampleEmail}}\",\r\n  \"password\": \"{{shortPassword}}\",\r\n  \"administrador\": \"true\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/usuarios/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{newUserId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_029: Atualizar usuário válido com senha > 10 caracteres",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const password = pm.variables.replaceIn('{{$randomPassword}}').slice(0, 11);\r",
															"pm.collectionVariables.set(\"longPassword\", password);\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"A senha deve ter no máximo 10 caracteres\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomExampleEmail}}\",\r\n  \"password\": \"{{longPassword}}\",\r\n  \"administrador\": \"true\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/usuarios/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{newUserId}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const name = pm.variables.replaceIn('{{$randomFullName}}');",
													"pm.collectionVariables.set(\"randomName\", name);",
													"const email = pm.variables.replaceIn('{{$randomExampleEmail}}');",
													"pm.collectionVariables.set(\"randomEmail\", email);",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get('baseUrl') + '/usuarios',",
													"    method: 'POST',",
													"    header: {",
													"        'Accept': 'application/json',",
													"        'Content-Type': 'application/json'",
													"      },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({",
													"            \"nome\": pm.collectionVariables.get('randomName'),",
													"            \"email\": pm.collectionVariables.get('randomEmail'),",
													"            \"password\": pm.collectionVariables.get('validPassword'),",
													"            \"administrador\": \"false\"",
													"        })",
													"    }",
													"}, function (err, res) {",
													"    pm.collectionVariables.set(\"newUserId\", res.json()._id);",
													"});",
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Usuário inexistente",
									"item": [
										{
											"name": "CT_030: Atualizar usuário inexistente (realizar cadastro válido)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Checks the response body\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.message).to.equal('Cadastro realizado com sucesso');\r",
															"    pm.expect(jsonData._id).not.null;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomExampleEmail}}\",\r\n  \"password\": \"{{validPassword}}\",\r\n  \"administrador\": \"true\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/usuarios/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{$randomPassword}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_031: Atualizar usuário inexistente com nome em branco",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"nome não pode ficar em branco\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"nome\": \"\",\r\n  \"email\": \"{{$randomExampleEmail}}\",\r\n  \"password\": \"{{validPassword}}\",\r\n  \"administrador\": \"true\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/usuarios/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{$randomPassword}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_032: Atualizar usuário inexistente com e-mail em branco",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"email não pode ficar em branco\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"\",\r\n  \"password\": \"{{validPassword}}\",\r\n  \"administrador\": \"true\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/usuarios/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{$randomPassword}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_033: Atualizar usuário inexistente com password em branco",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"password não pode ficar em branco\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomExampleEmail}}\",\r\n  \"password\": \"\",\r\n  \"administrador\": \"true\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/usuarios/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{$randomPassword}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_034: Atualizar usuário inexistente com administrador em branco",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"administrador deve ser 'true' ou 'false'\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomExampleEmail}}\",\r\n  \"password\": \"{{validPassword}}\",\r\n  \"administrador\": \"\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/usuarios/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{$randomPassword}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_035: Atualizar usuário inexistente com e-mail inválido",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"email deve ser um email válido\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomUserName}}.com\",\r\n  \"password\": \"{{validPassword}}\",\r\n  \"administrador\": \"true\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/usuarios/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{$randomPassword}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_036: Atualizar usuário inexistente com e-mail já cadastrado",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Este email já está sendo usado\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{adminEmail}}\",\r\n  \"password\": \"{{validPassword}}\",\r\n  \"administrador\": \"true\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/usuarios/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{$randomPassword}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_037: Atualizar usuário inexistente com Hotmail",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Não é possível realizar cadastro com provedor de e-mail Hotmail\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomUserName}}@hotmail.com\",\r\n  \"password\": \"{{validPassword}}\",\r\n  \"administrador\": \"true\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/usuarios/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{$randomPassword}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_038: Atualizar usuário inexistente com Gmail",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Não é possível realizar cadastro com provedor de e-mail Gmail\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomUserName}}@gmail.com\",\r\n  \"password\": \"{{validPassword}}\",\r\n  \"administrador\": \"true\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/usuarios/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{$randomPassword}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_039: Atualizar usuário inexistente com senha < 5 caracteres",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const password = pm.variables.replaceIn('{{$randomPassword}}').slice(0, 4);\r",
															"pm.collectionVariables.set(\"longPassword\", password);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"A senha deve ter no mínimo 5 caracteres\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomExampleEmail}}\",\r\n  \"password\": \"{{shortPassword}}\",\r\n  \"administrador\": \"true\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/usuarios/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{$randomPassword}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_040: Atualizar usuário inexistente com senha > 10 caracteres",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const password = pm.variables.replaceIn('{{$randomPassword}}').slice(0, 11);\r",
															"pm.collectionVariables.set(\"longPassword\", password);\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"A senha deve ter no máximo 10 caracteres\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomExampleEmail}}\",\r\n  \"password\": \"{{longPassword}}\",\r\n  \"administrador\": \"true\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/usuarios/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{$randomPassword}}"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const password = pm.variables.replaceIn('{{$randomPassword}}').slice(0, 8);",
											"pm.collectionVariables.set(\"validPassword\", password);",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const password = pm.variables.replaceIn('{{$randomPassword}}').slice(0, 8);",
							"pm.collectionVariables.set(\"validPassword\", password);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "login",
			"item": [
				{
					"name": "Realizar login",
					"item": [
						{
							"name": "CT_041: Realizar login válido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checks the response body\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql('Login realizado com sucesso');\r",
											"    pm.expect(jsonData.authorization).not.null;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{adminEmail}}\",\r\n  \"password\": \"{{adminPassword}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT_042: Realizar login com senha incorreta",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Email e/ou senha inválidos\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{adminEmail}}\",\r\n  \"password\": \"{{validPassword}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT_043: Realizar login com e-mail não cadastrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Email e/ou senha inválidos\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{$randomExampleEmail}}\",\r\n  \"password\": \"{{adminPassword}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT_044: Realizar login com e-mail em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"email não pode ficar em branco\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"\",\r\n  \"password\": \"{{adminPassword}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT_045: Realizar login com senha em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"password não pode ficar em branco\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{adminEmail}}\",\r\n  \"password\": \"\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "produtos",
			"item": [
				{
					"name": "Cadastrar produto",
					"item": [
						{
							"name": "CT_046: Cadastrar produto válido como administrador",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Checks the response body\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql('Cadastro realizado com sucesso');\r",
											"    pm.expect(jsonData.id).not.null;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"{{$randomPhrase}}\",\r\n  \"quantidade\": {{$randomInt}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/produtos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT_047: Cadastrar produto válido como usuário comum",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Rota exclusiva para administradores\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const name = pm.variables.replaceIn('{{$randomFullName}}');\r",
											"pm.collectionVariables.set(\"randomName\", name);\r",
											"const email = pm.variables.replaceIn('{{$randomExampleEmail}}');\r",
											"pm.collectionVariables.set(\"randomEmail\", email);\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get('baseUrl') + '/usuarios',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json'\r",
											"      },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": pm.collectionVariables.get('randomName'),\r",
											"            \"email\": pm.collectionVariables.get('randomEmail'),\r",
											"            \"password\": pm.collectionVariables.get('validPassword'),\r",
											"            \"administrador\": \"false\"\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"            console.error(err);\r",
											"            return;\r",
											"    }\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: pm.environment.get('baseUrl') + '/login',\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"email\": pm.collectionVariables.get('randomEmail'),\r",
											"                \"password\": pm.collectionVariables.get('validPassword')\r",
											"            })\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        if (err) {\r",
											"            console.error(err);\r",
											"            return;\r",
											"        }\r",
											"\r",
											"        pm.collectionVariables.set('token', res.json().authorization);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"{{$randomPhrase}}\",\r\n  \"quantidade\": {{$randomInt}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/produtos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT_048: Cadastrar produto válido sem autenticação",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"{{$randomPhrase}}\",\r\n  \"quantidade\": {{$randomInt}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/produtos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT_049: Cadastrar produto com nome já cadastrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Já existe produto com esse nome\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{defaultProductName}}\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"{{$randomPhrase}}\",\r\n  \"quantidade\": {{$randomInt}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/produtos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT_050: Cadastrar produto com nome em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"nome não pode ficar em branco\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"{{$randomPhrase}}\",\r\n  \"quantidade\": {{$randomInt}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/produtos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT_051: Cadastrar produto com preço em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"preco deve ser um número\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": \"\",\r\n  \"descricao\": \"{{$randomPhrase}}\",\r\n  \"quantidade\": {{$randomInt}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/produtos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT_052: Cadastrar produto com preço inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"preco deve ser um número\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": \"{{$randomMonth}}\",\r\n  \"descricao\": \"{{$randomPhrase}}\",\r\n  \"quantidade\": {{$randomInt}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/produtos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT_053: Cadastrar produto com descrição em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"descricao não pode ficar em branco\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"\",\r\n  \"quantidade\": {{$randomInt}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/produtos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT_054: Cadastrar produto com quantidade em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"quantidade deve ser um número\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"{{$randomPhrase}}\",\r\n  \"quantidade\": \"\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/produtos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT_055: Cadastrar produto com quantidade inválida",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"quantidade deve ser um número\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"{{$randomPhrase}}\",\r\n  \"quantidade\": \"{{$randomHexColor}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/produtos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT_056: Cadastrar produto com quantidade float",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"quantidade deve ser um inteiro\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"{{$randomPhrase}}\",\r\n  \"quantidade\": \"{{$randomPrice}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/produtos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.sendRequest({",
									"    url: pm.environment.get('baseUrl') + '/login',",
									"    method: 'POST',",
									"    header: {",
									"        'Accept': 'application/json',",
									"        'Content-Type': 'application/json'",
									"      },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"email\": pm.collectionVariables.get('adminEmail'),",
									"            \"password\": pm.collectionVariables.get('adminPassword')",
									"        })",
									"    }",
									"}, function (err, res) {",
									"    pm.collectionVariables.set('token', res.json().authorization);",
									"});",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Listar produtos cadastrados",
					"item": [
						{
							"name": "CT_057: Obter uma lista de produtos cadastrados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checks the response body\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.quantidade).to.be.a('number');\r",
											"    pm.expect(jsonData.produtos).lengthOf(jsonData.quantidade);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/produtos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "{_id}",
					"item": [
						{
							"name": "Buscar produto por ID",
							"item": [
								{
									"name": "CT_058: Buscar por produto válido",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Checks the response body\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.nome).to.equal(pm.collectionVariables.get('defaultProductName'));\r",
													"    pm.expect(jsonData.preco).to.be.greaterThan(0);\r",
													"    pm.expect(jsonData.descricao).to.be.a('string');\r",
													"    pm.expect(jsonData.quantidade).to.be.a('number');\r",
													"    pm.expect(jsonData._id).to.equal(pm.collectionVariables.get('defaultProductId'));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/produtos/:_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"produtos",
												":_id"
											],
											"variable": [
												{
													"key": "_id",
													"value": "{{defaultProductId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CT_059: Buscar por produto inexistente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Produto não encontrado\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/produtos/:_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"produtos",
												":_id"
											],
											"variable": [
												{
													"key": "_id",
													"value": "{{$randomPassword}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Excluir produto",
							"item": [
								{
									"name": "CT_060: Excluir produto válido como administrador",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/produtos/:_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"produtos",
												":_id"
											],
											"variable": [
												{
													"key": "_id",
													"value": "{{newProductId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CT_061: Excluir produto inexistente",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Nenhum registro excluído\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/produtos/:_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"produtos",
												":_id"
											],
											"variable": [
												{
													"key": "_id",
													"value": "{{$randomPassword}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CT_062: Excluir produto pertencente à um carrinho",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Checks the response body\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.equal('Não é permitido excluir produto que faz parte de carrinho');\r",
													"    pm.expect(jsonData.idCarrinhos).length.greaterThan(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/produtos/:_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"produtos",
												":_id"
											],
											"variable": [
												{
													"key": "_id",
													"value": "{{defaultProductId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CT_063: Excluir produto válido como usuário comum",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const name = pm.variables.replaceIn('{{$randomFullName}}');\r",
													"pm.collectionVariables.set(\"randomName\", name);\r",
													"const email = pm.variables.replaceIn('{{$randomExampleEmail}}');\r",
													"pm.collectionVariables.set(\"randomEmail\", email);\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get('baseUrl') + '/usuarios',\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json'\r",
													"      },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": pm.collectionVariables.get('randomName'),\r",
													"            \"email\": pm.collectionVariables.get('randomEmail'),\r",
													"            \"password\": pm.collectionVariables.get('validPassword'),\r",
													"            \"administrador\": \"false\"\r",
													"        })\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"            console.error(err);\r",
													"            return;\r",
													"    }\r",
													"\r",
													"    pm.sendRequest({\r",
													"        url: pm.environment.get('baseUrl') + '/login',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'Accept': 'application/json',\r",
													"            'Content-Type': 'application/json'\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'raw',\r",
													"            raw: JSON.stringify({\r",
													"                \"email\": pm.collectionVariables.get('randomEmail'),\r",
													"                \"password\": pm.collectionVariables.get('validPassword')\r",
													"            })\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) {\r",
													"            console.error(err);\r",
													"            return;\r",
													"        }\r",
													"\r",
													"        pm.collectionVariables.set('token', res.json().authorization);\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Rota exclusiva para administradores\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/produtos/:_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"produtos",
												":_id"
											],
											"variable": [
												{
													"key": "_id",
													"value": "{{newProductId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CT_064: Excluir produto válido sem autenticação",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/produtos/:_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"produtos",
												":_id"
											],
											"variable": [
												{
													"key": "_id",
													"value": "{{newProductId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.sendRequest({",
											"    url: pm.environment.get('baseUrl') + '/login',",
											"    method: 'POST',",
											"    header: {",
											"        'Accept': 'application/json',",
											"        'Content-Type': 'application/json'",
											"      },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"email\": pm.collectionVariables.get('adminEmail'),",
											"            \"password\": pm.collectionVariables.get('adminPassword')",
											"        })",
											"    }",
											"}, function (err, res) {",
											"    ",
											"    pm.collectionVariables.set('token', res.json().authorization);",
											"",
											"    const name = pm.variables.replaceIn('{{$randomProductName}}');",
											"    pm.collectionVariables.set(\"randomProductName\", name);",
											"    const price = pm.variables.replaceIn('{{$randomInt}}');",
											"    pm.collectionVariables.set(\"randomProductPrice\", price);",
											"    const description = pm.variables.replaceIn('{{$randomPhrase}}');",
											"    pm.collectionVariables.set(\"randomProductDescription\", description);",
											"    const quantity = pm.variables.replaceIn('{{$randomInt}}');",
											"    pm.collectionVariables.set(\"randomProductQuantity\", quantity);",
											"",
											"    pm.sendRequest({",
											"        url: pm.environment.get('baseUrl') + '/produtos',",
											"        method: 'POST',",
											"        header: {",
											"            'Accept': 'application/json',",
											"            'Content-Type': 'application/json',",
											"            'Authorization': pm.collectionVariables.get('token')",
											"        },",
											"        body: {",
											"            mode: 'raw',",
											"            raw: JSON.stringify({",
											"                \"nome\": pm.collectionVariables.get('randomProductName'),",
											"                \"preco\": pm.collectionVariables.get('randomProductPrice'),",
											"                \"descricao\": pm.collectionVariables.get('randomProductDescription'),",
											"                \"quantidade\": pm.collectionVariables.get('randomProductQuantity')",
											"            })",
											"        }",
											"    }, function (err, res) {",
											"        pm.collectionVariables.set('newProductId', res.json()._id);",
											"    });",
											"});",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Editar produto",
							"item": [
								{
									"name": "Produto válido",
									"item": [
										{
											"name": "CT_065: Atualizar produto válido como administrador",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n            \"nome\": \"{{$randomProductName}}\",\r\n            \"preco\": \"{{$randomInt}}\",\r\n            \"descricao\": \"{{$randomPhrase}}\",\r\n            \"quantidade\": \"{{$randomInt}}\"\r\n        }\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{newProductId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_066: Atualizar produto válido como usuário comum",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Rota exclusiva para administradores\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const name = pm.variables.replaceIn('{{$randomFullName}}');\r",
															"pm.collectionVariables.set(\"randomName\", name);\r",
															"const email = pm.variables.replaceIn('{{$randomExampleEmail}}');\r",
															"pm.collectionVariables.set(\"randomEmail\", email);\r",
															"\r",
															"pm.sendRequest({\r",
															"    url: pm.environment.get('baseUrl') + '/usuarios',\r",
															"    method: 'POST',\r",
															"    header: {\r",
															"        'Accept': 'application/json',\r",
															"        'Content-Type': 'application/json'\r",
															"      },\r",
															"    body: {\r",
															"        mode: 'raw',\r",
															"        raw: JSON.stringify({\r",
															"            \"nome\": pm.collectionVariables.get('randomName'),\r",
															"            \"email\": pm.collectionVariables.get('randomEmail'),\r",
															"            \"password\": pm.collectionVariables.get('validPassword'),\r",
															"            \"administrador\": \"false\"\r",
															"        })\r",
															"    }\r",
															"}, function (err, res) {\r",
															"    if (err) {\r",
															"            console.error(err);\r",
															"            return;\r",
															"    }\r",
															"\r",
															"    pm.sendRequest({\r",
															"        url: pm.environment.get('baseUrl') + '/login',\r",
															"        method: 'POST',\r",
															"        header: {\r",
															"            'Accept': 'application/json',\r",
															"            'Content-Type': 'application/json'\r",
															"        },\r",
															"        body: {\r",
															"            mode: 'raw',\r",
															"            raw: JSON.stringify({\r",
															"                \"email\": pm.collectionVariables.get('randomEmail'),\r",
															"                \"password\": pm.collectionVariables.get('validPassword')\r",
															"            })\r",
															"        }\r",
															"    }, function (err, res) {\r",
															"        if (err) {\r",
															"            console.error(err);\r",
															"            return;\r",
															"        }\r",
															"\r",
															"        pm.collectionVariables.set('token', res.json().authorization);\r",
															"    });\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n            \"nome\": \"{{$randomProductName}}\",\r\n            \"preco\": \"{{$randomInt}}\",\r\n            \"descricao\": \"{{$randomPhrase}}\",\r\n            \"quantidade\": \"{{$randomInt}}\"\r\n        }\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{newProductId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_067: Atualizar produto válido sem autenticação",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n            \"nome\": \"{{$randomProductName}}\",\r\n            \"preco\": \"{{$randomInt}}\",\r\n            \"descricao\": \"{{$randomPhrase}}\",\r\n            \"quantidade\": \"{{$randomInt}}\"\r\n        }\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{newProductId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_068: Atualizar produto válido com nome já cadastrado",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Já existe produto com esse nome\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n            \"nome\": \"{{defaultProductName}}\",\r\n            \"preco\": \"{{$randomInt}}\",\r\n            \"descricao\": \"{{$randomPhrase}}\",\r\n            \"quantidade\": \"{{$randomInt}}\"\r\n        }\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{newProductId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_069: Atualizar produto válido com nome em branco",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"nome não pode ficar em branco\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n            \"nome\": \"\",\r\n            \"preco\": \"{{$randomInt}}\",\r\n            \"descricao\": \"{{$randomPhrase}}\",\r\n            \"quantidade\": \"{{$randomInt}}\"\r\n        }\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{newProductId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_070: Atualizar produto válido com preço em branco",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"preco deve ser um número\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n            \"nome\": \"{{$randomProductName}}\",\r\n            \"preco\": \"\",\r\n            \"descricao\": \"{{$randomPhrase}}\",\r\n            \"quantidade\": \"{{$randomInt}}\"\r\n        }\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{newProductId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_071: Atualizar produto válido com preço inválido",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"preco deve ser um número\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n            \"nome\": \"{{$randomProductName}}\",\r\n            \"preco\": \"{{$randomHexColor}}\",\r\n            \"descricao\": \"{{$randomPhrase}}\",\r\n            \"quantidade\": \"{{$randomInt}}\"\r\n        }\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{newProductId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_072: Atualizar produto válido com descrição em branco",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"descricao não pode ficar em branco\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n            \"nome\": \"{{$randomProductName}}\",\r\n            \"preco\": \"{{$randomInt}}\",\r\n            \"descricao\": \"\",\r\n            \"quantidade\": \"{{$randomInt}}\"\r\n        }\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{newProductId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_073: Atualizar produto válido com quantidade em branco",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"quantidade deve ser um número\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n            \"nome\": \"{{$randomProductName}}\",\r\n            \"preco\": \"{{$randomInt}}\",\r\n            \"descricao\": \"{{$randomPhrase}}\",\r\n            \"quantidade\": \"\"\r\n        }\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{newProductId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_074: Atualizar produto válido com quantidade inválida",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"quantidade deve ser um número\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n            \"nome\": \"{{$randomProductName}}\",\r\n            \"preco\": \"{{$randomInt}}\",\r\n            \"descricao\": \"{{$randomPhrase}}\",\r\n            \"quantidade\": \"{{$randomHexColor}}\"\r\n        }\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{newProductId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_075: Atualizar produto válido com quantidade float",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"quantidade deve ser um inteiro\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n            \"nome\": \"{{$randomProductName}}\",\r\n            \"preco\": \"{{$randomInt}}\",\r\n            \"descricao\": \"{{$randomPhrase}}\",\r\n            \"quantidade\": \"{{$randomPrice}}\"\r\n        }\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{newProductId}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.sendRequest({",
													"    url: pm.environment.get('baseUrl') + '/login',",
													"    method: 'POST',",
													"    header: {",
													"        'Accept': 'application/json',",
													"        'Content-Type': 'application/json'",
													"      },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({",
													"            \"email\": pm.collectionVariables.get('adminEmail'),",
													"            \"password\": pm.collectionVariables.get('adminPassword')",
													"        })",
													"    }",
													"}, function (err, res) {",
													"    ",
													"    pm.collectionVariables.set('token', res.json().authorization);",
													"",
													"    const name = pm.variables.replaceIn('{{$randomProductName}}');",
													"    pm.collectionVariables.set(\"randomProductName\", name);",
													"    const price = pm.variables.replaceIn('{{$randomInt}}');",
													"    pm.collectionVariables.set(\"randomProductPrice\", price);",
													"    const description = pm.variables.replaceIn('{{$randomPhrase}}');",
													"    pm.collectionVariables.set(\"randomProductDescription\", description);",
													"    const quantity = pm.variables.replaceIn('{{$randomInt}}');",
													"    pm.collectionVariables.set(\"randomProductQuantity\", quantity);",
													"",
													"    pm.sendRequest({",
													"        url: pm.environment.get('baseUrl') + '/produtos',",
													"        method: 'POST',",
													"        header: {",
													"            'Accept': 'application/json',",
													"            'Content-Type': 'application/json',",
													"            'Authorization': pm.collectionVariables.get('token')",
													"        },",
													"        body: {",
													"            mode: 'raw',",
													"            raw: JSON.stringify({",
													"                \"nome\": pm.collectionVariables.get('randomProductName'),",
													"                \"preco\": pm.collectionVariables.get('randomProductPrice'),",
													"                \"descricao\": pm.collectionVariables.get('randomProductDescription'),",
													"                \"quantidade\": pm.collectionVariables.get('randomProductQuantity')",
													"            })",
													"        }",
													"    }, function (err, res) {",
													"        pm.collectionVariables.set('newProductId', res.json()._id);",
													"    });",
													"});",
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Produto inexistente",
									"item": [
										{
											"name": "CT_076: Atualizar produto inexistente como administrador (cadastrar produto válido)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Your test name\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.message).to.eql('Cadastro realizado com sucesso');\r",
															"    pm.expect(jsonData.id).not.null;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n            \"nome\": \"{{$randomProductName}}\",\r\n            \"preco\": \"{{$randomInt}}\",\r\n            \"descricao\": \"{{$randomPhrase}}\",\r\n            \"quantidade\": \"{{$randomInt}}\"\r\n        }\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{$randomPassword}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_078: Atualizar produto inexistente sem autenticação",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n            \"nome\": \"{{$randomProductName}}\",\r\n            \"preco\": \"{{$randomInt}}\",\r\n            \"descricao\": \"{{$randomPhrase}}\",\r\n            \"quantidade\": \"{{$randomInt}}\"\r\n        }\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{$randomPassword}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_079: Atualizar produto inexistente com nome já cadastrado",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Já existe produto com esse nome\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n            \"nome\": \"{{defaultProductName}}\",\r\n            \"preco\": \"{{$randomInt}}\",\r\n            \"descricao\": \"{{$randomPhrase}}\",\r\n            \"quantidade\": \"{{$randomInt}}\"\r\n        }\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{$randomPassword}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_080: Atualizar produto inexistente com nome em branco",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"nome não pode ficar em branco\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n            \"nome\": \"\",\r\n            \"preco\": \"{{$randomInt}}\",\r\n            \"descricao\": \"{{$randomPhrase}}\",\r\n            \"quantidade\": \"{{$randomInt}}\"\r\n        }\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{$randomPassword}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_081: Atualizar produto inexistente com preço em branco",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"preco deve ser um número\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n            \"nome\": \"{{$randomProductName}}\",\r\n            \"preco\": \"\",\r\n            \"descricao\": \"{{$randomPhrase}}\",\r\n            \"quantidade\": \"{{$randomInt}}\"\r\n        }\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{$randomPassword}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_082: Atualizar produto inexistente com preço inválido",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"preco deve ser um número\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n            \"nome\": \"{{$randomProductName}}\",\r\n            \"preco\": \"{{$randomHexColor}}\",\r\n            \"descricao\": \"{{$randomPhrase}}\",\r\n            \"quantidade\": \"{{$randomInt}}\"\r\n        }\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{$randomPassword}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_083: Atualizar produto inexistente com descrição em branco",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"descricao não pode ficar em branco\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n            \"nome\": \"{{$randomProductName}}\",\r\n            \"preco\": \"{{$randomInt}}\",\r\n            \"descricao\": \"\",\r\n            \"quantidade\": \"{{$randomInt}}\"\r\n        }\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{$randomPassword}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_084: Atualizar produto inexistente com quantidade em branco",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"quantidade deve ser um número\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n            \"nome\": \"{{$randomProductName}}\",\r\n            \"preco\": \"{{$randomInt}}\",\r\n            \"descricao\": \"{{$randomPhrase}}\",\r\n            \"quantidade\": \"\"\r\n        }\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{$randomPassword}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_085: Atualizar produto inexistente com quantidade inválida",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"quantidade deve ser um número\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n            \"nome\": \"{{$randomProductName}}\",\r\n            \"preco\": \"{{$randomInt}}\",\r\n            \"descricao\": \"{{$randomPhrase}}\",\r\n            \"quantidade\": \"{{$randomHexColor}}\"\r\n        }\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{$randomPassword}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_086: Atualizar produto inexistente com quantidade float",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"quantidade deve ser um inteiro\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n            \"nome\": \"{{$randomProductName}}\",\r\n            \"preco\": \"{{$randomInt}}\",\r\n            \"descricao\": \"{{$randomPhrase}}\",\r\n            \"quantidade\": \"{{$randomPrice}}\"\r\n        }\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{$randomPassword}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CT_077: Atualizar produto inexistente como usuário comum",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															"\r",
															"pm.test(\"Body matches string\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Rota exclusiva para administradores\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const name = pm.variables.replaceIn('{{$randomFullName}}');\r",
															"pm.collectionVariables.set(\"randomName\", name);\r",
															"const email = pm.variables.replaceIn('{{$randomExampleEmail}}');\r",
															"pm.collectionVariables.set(\"randomEmail\", email);\r",
															"\r",
															"pm.sendRequest({\r",
															"    url: pm.environment.get('baseUrl') + '/usuarios',\r",
															"    method: 'POST',\r",
															"    header: {\r",
															"        'Accept': 'application/json',\r",
															"        'Content-Type': 'application/json'\r",
															"      },\r",
															"    body: {\r",
															"        mode: 'raw',\r",
															"        raw: JSON.stringify({\r",
															"            \"nome\": pm.collectionVariables.get('randomName'),\r",
															"            \"email\": pm.collectionVariables.get('randomEmail'),\r",
															"            \"password\": pm.collectionVariables.get('validPassword'),\r",
															"            \"administrador\": \"false\"\r",
															"        })\r",
															"    }\r",
															"}, function (err, res) {\r",
															"    if (err) {\r",
															"            console.error(err);\r",
															"            return;\r",
															"    }\r",
															"\r",
															"    pm.sendRequest({\r",
															"        url: pm.environment.get('baseUrl') + '/login',\r",
															"        method: 'POST',\r",
															"        header: {\r",
															"            'Accept': 'application/json',\r",
															"            'Content-Type': 'application/json'\r",
															"        },\r",
															"        body: {\r",
															"            mode: 'raw',\r",
															"            raw: JSON.stringify({\r",
															"                \"email\": pm.collectionVariables.get('randomEmail'),\r",
															"                \"password\": pm.collectionVariables.get('validPassword')\r",
															"            })\r",
															"        }\r",
															"    }, function (err, res) {\r",
															"        if (err) {\r",
															"            console.error(err);\r",
															"            return;\r",
															"        }\r",
															"\r",
															"        pm.collectionVariables.set('token', res.json().authorization);\r",
															"    });\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n            \"nome\": \"{{$randomProductName}}\",\r\n            \"preco\": \"{{$randomInt}}\",\r\n            \"descricao\": \"{{$randomPhrase}}\",\r\n            \"quantidade\": \"{{$randomInt}}\"\r\n        }\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{$randomPassword}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.sendRequest({",
													"    url: pm.environment.get('baseUrl') + '/login',",
													"    method: 'POST',",
													"    header: {",
													"        'Accept': 'application/json',",
													"        'Content-Type': 'application/json'",
													"      },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({",
													"            \"email\": pm.collectionVariables.get('adminEmail'),",
													"            \"password\": pm.collectionVariables.get('adminPassword')",
													"        })",
													"    }",
													"}, function (err, res) {",
													"    pm.collectionVariables.set('token', res.json().authorization);",
													"});",
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "carrinhos",
			"item": [
				{
					"name": "Cadastrar carrinho",
					"item": [
						{
							"name": "CT_087: Cadastrar carrinho válido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Your test name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql('Cadastro realizado com sucesso');\r",
											"    pm.expect(jsonData.id).not.null;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{defaultProductId}}\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/carrinhos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT_088: Cadastrar carrinho vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"produtos não contém 1 valor obrigatório\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": []\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/carrinhos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT_089: Cadastrar carrinho com produto inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Your test name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql('Produto não encontrado');\r",
											"    pm.expect(jsonData.item).to.be.a('object');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{$randomPassword}}\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/carrinhos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT_090: Cadastrar carrinho com produto duplicado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Your test name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql('Não é permitido possuir produto duplicado');\r",
											"    pm.expect(jsonData.idProdutosDuplicados).length.greaterThan(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{defaultProductId}}\",\r\n      \"quantidade\": 1\r\n    },\r\n    {\r\n      \"idProduto\": \"{{defaultProductId}}\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/carrinhos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT_091: Cadastrar carrinho com produto em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('produtos não contém 1 valor obrigatório');\r",
											"    pm.expect(pm.response.text()).to.include('.idProduto não pode ficar em branco')\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/carrinhos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT_092: Cadastrar carrinho com quantidade indisponível",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Your test name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql('Produto não possui quantidade suficiente');\r",
											"    pm.expect(jsonData.item.quantidade).greaterThan(jsonData.item.quantidadeEstoque);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{defaultProductId}}\",\r\n      \"quantidade\": 100000\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/carrinhos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT_093: Cadastrar carrinho com quantidade inválida",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('produtos não contém 1 valor obrigatório');\r",
											"    pm.expect(pm.response.text()).to.include('.quantidade deve ser um número');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{defaultProductId}}\",\r\n      \"quantidade\": \"{{$randomHexColor}}\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/carrinhos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT_094: Cadastrar carrinho com quantidade zero",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('produtos não contém 1 valor obrigatório');\r",
											"    pm.expect(pm.response.text()).to.include('.quantidade deve ser um número positivo');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{defaultProductId}}\",\r\n      \"quantidade\": 0\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/carrinhos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT_095: Cadastrar carrinho com quantidade em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('.quantidade deve ser um número');\r",
											"    pm.expect(pm.response.text()).to.include('produtos não contém 1 valor obrigatório');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{defaultProductId}}\",\r\n      \"quantidade\": \"\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/carrinhos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT_096: Cadastrar carrinho para usuário com carrinho já cadastrado",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.environment.get('baseUrl') + '/carrinhos',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': pm.collectionVariables.get('token')\r",
											"      },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"produtos\": [\r",
											"                {\r",
											"                \"idProduto\": pm.collectionVariables.get('defaultProductId'),\r",
											"                \"quantidade\": 1\r",
											"                }\r",
											"            ]\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"            console.error(err);\r",
											"            return;\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('Não é permitido ter mais de 1 carrinho');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{defaultProductId}}\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/carrinhos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT_097: Cadastrar carrinho sem estar autenticado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('Token de acesso ausente, inválido, expirado ou usuário do token não existe mais');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{defaultProductId}}\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/carrinhos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const name = pm.variables.replaceIn('{{$randomFullName}}');",
									"pm.collectionVariables.set(\"randomName\", name);",
									"const email = pm.variables.replaceIn('{{$randomExampleEmail}}');",
									"pm.collectionVariables.set(\"randomEmail\", email);",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get('baseUrl') + '/usuarios',",
									"    method: 'POST',",
									"    header: {",
									"        'Accept': 'application/json',",
									"        'Content-Type': 'application/json'",
									"      },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"nome\": pm.collectionVariables.get('randomName'),",
									"            \"email\": pm.collectionVariables.get('randomEmail'),",
									"            \"password\": pm.collectionVariables.get('validPassword'),",
									"            \"administrador\": \"false\"",
									"        })",
									"    }",
									"}, function (err, res) {",
									"    if (err) {",
									"            console.error(err);",
									"            return;",
									"    }",
									"",
									"    pm.sendRequest({",
									"        url: pm.environment.get('baseUrl') + '/login',",
									"        method: 'POST',",
									"        header: {",
									"            'Accept': 'application/json',",
									"            'Content-Type': 'application/json'",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify({",
									"                \"email\": pm.collectionVariables.get('randomEmail'),",
									"                \"password\": pm.collectionVariables.get('validPassword')",
									"            })",
									"        }",
									"    }, function (err, res) {",
									"        if (err) {",
									"            console.error(err);",
									"            return;",
									"        }",
									"",
									"        pm.collectionVariables.set('token', res.json().authorization);",
									"    });",
									"});",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Listar carrinhos cadastrados",
					"item": [
						{
							"name": "CT_098: Obter lista de carrinhos cadastrados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Your test name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.quantidade).to.be.a('number');\r",
											"    pm.expect(jsonData.carrinhos).to.be.a('array');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/carrinhos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "{_id}",
					"item": [
						{
							"name": "Buscar carrinho por ID",
							"item": [
								{
									"name": "Buscar carrinho por ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Your test name\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.produtos).length.greaterThan(0);\r",
													"    pm.expect(jsonData.precoTotal).to.be.a('number');\r",
													"    pm.expect(jsonData.quantidadeTotal).greaterThan(0);\r",
													"    pm.expect(jsonData.idUsuario).not.null;\r",
													"    pm.expect(jsonData._id).to.be.equal(pm.collectionVariables.get('defaultCartId'));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/carrinhos/:_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"carrinhos",
												":_id"
											],
											"variable": [
												{
													"key": "_id",
													"value": "{{defaultCartId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CT_100: Buscar por carrinho inválido",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include('Carrinho não encontrado');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/carrinhos/:_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"carrinhos",
												":_id"
											],
											"variable": [
												{
													"key": "_id",
													"value": "{{$randomPassword}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "concluir-compra",
					"item": [
						{
							"name": "Concluir compra",
							"item": [
								{
									"name": "CT_101: Concluir compra com carrinho válido",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const name = pm.variables.replaceIn('{{$randomFullName}}');\r",
													"pm.collectionVariables.set(\"randomName\", name);\r",
													"const email = pm.variables.replaceIn('{{$randomExampleEmail}}');\r",
													"pm.collectionVariables.set(\"randomEmail\", email);\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get('baseUrl') + '/usuarios',\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json'\r",
													"      },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": pm.collectionVariables.get('randomName'),\r",
													"            \"email\": pm.collectionVariables.get('randomEmail'),\r",
													"            \"password\": pm.collectionVariables.get('validPassword'),\r",
													"            \"administrador\": \"false\"\r",
													"        })\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"            console.error(err);\r",
													"            return;\r",
													"    }\r",
													"\r",
													"    pm.sendRequest({\r",
													"        url: pm.environment.get('baseUrl') + '/login',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'Accept': 'application/json',\r",
													"            'Content-Type': 'application/json'\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'raw',\r",
													"            raw: JSON.stringify({\r",
													"                \"email\": pm.collectionVariables.get('randomEmail'),\r",
													"                \"password\": pm.collectionVariables.get('validPassword')\r",
													"            })\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) {\r",
													"            console.error(err);\r",
													"            return;\r",
													"        }\r",
													"\r",
													"        pm.collectionVariables.set('token', res.json().authorization);\r",
													"\r",
													"        pm.sendRequest({\r",
													"            url: pm.environment.get('baseUrl') + '/carrinhos',\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'Authorization': pm.collectionVariables.get('token')\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"produtos\": [\r",
													"                        {\r",
													"                        \"idProduto\": pm.collectionVariables.get('defaultProductId'),\r",
													"                        \"quantidade\": 1\r",
													"                        }\r",
													"                    ]\r",
													"                })\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) {\r",
													"                    console.error(err);\r",
													"                    return;\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include('Registro excluído com sucesso');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/carrinhos/concluir-compra",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"carrinhos",
												"concluir-compra"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT_102: Concluir compra com carrinho inexistente",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const name = pm.variables.replaceIn('{{$randomFullName}}');\r",
													"pm.collectionVariables.set(\"randomName\", name);\r",
													"const email = pm.variables.replaceIn('{{$randomExampleEmail}}');\r",
													"pm.collectionVariables.set(\"randomEmail\", email);\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get('baseUrl') + '/usuarios',\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json'\r",
													"      },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": pm.collectionVariables.get('randomName'),\r",
													"            \"email\": pm.collectionVariables.get('randomEmail'),\r",
													"            \"password\": pm.collectionVariables.get('validPassword'),\r",
													"            \"administrador\": \"false\"\r",
													"        })\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"            console.error(err);\r",
													"            return;\r",
													"    }\r",
													"\r",
													"    pm.sendRequest({\r",
													"        url: pm.environment.get('baseUrl') + '/login',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'Accept': 'application/json',\r",
													"            'Content-Type': 'application/json'\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'raw',\r",
													"            raw: JSON.stringify({\r",
													"                \"email\": pm.collectionVariables.get('randomEmail'),\r",
													"                \"password\": pm.collectionVariables.get('validPassword')\r",
													"            })\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) {\r",
													"            console.error(err);\r",
													"            return;\r",
													"        }\r",
													"\r",
													"        pm.collectionVariables.set('token', res.json().authorization);\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include('Não foi encontrado carrinho para esse usuário');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/carrinhos/concluir-compra",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"carrinhos",
												"concluir-compra"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT_103: Concluir compra sem estar autenticado",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include('Token de acesso ausente, inválido, expirado ou usuário do token não existe mais');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/carrinhos/concluir-compra",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"carrinhos",
												"concluir-compra"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "cancelar-compra",
					"item": [
						{
							"name": "Excluir carrinho e retornar produtos para estoque",
							"item": [
								{
									"name": "CT_104: Cancelar compra com carrinho válido",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const name = pm.variables.replaceIn('{{$randomFullName}}');\r",
													"pm.collectionVariables.set(\"randomName\", name);\r",
													"const email = pm.variables.replaceIn('{{$randomExampleEmail}}');\r",
													"pm.collectionVariables.set(\"randomEmail\", email);\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get('baseUrl') + '/usuarios',\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json'\r",
													"      },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": pm.collectionVariables.get('randomName'),\r",
													"            \"email\": pm.collectionVariables.get('randomEmail'),\r",
													"            \"password\": pm.collectionVariables.get('validPassword'),\r",
													"            \"administrador\": \"false\"\r",
													"        })\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"            console.error(err);\r",
													"            return;\r",
													"    }\r",
													"\r",
													"    pm.sendRequest({\r",
													"        url: pm.environment.get('baseUrl') + '/login',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'Accept': 'application/json',\r",
													"            'Content-Type': 'application/json'\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'raw',\r",
													"            raw: JSON.stringify({\r",
													"                \"email\": pm.collectionVariables.get('randomEmail'),\r",
													"                \"password\": pm.collectionVariables.get('validPassword')\r",
													"            })\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) {\r",
													"            console.error(err);\r",
													"            return;\r",
													"        }\r",
													"\r",
													"        pm.collectionVariables.set('token', res.json().authorization);\r",
													"\r",
													"        pm.sendRequest({\r",
													"            url: pm.environment.get('baseUrl') + '/carrinhos',\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'Authorization': pm.collectionVariables.get('token')\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"produtos\": [\r",
													"                        {\r",
													"                        \"idProduto\": pm.collectionVariables.get('defaultProductId'),\r",
													"                        \"quantidade\": 1\r",
													"                        }\r",
													"                    ]\r",
													"                })\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) {\r",
													"                    console.error(err);\r",
													"                    return;\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso. Estoque dos produtos reabastecido\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/carrinhos/cancelar-compra",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"carrinhos",
												"cancelar-compra"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT_105: Cancelar compra com carrinho inexistente",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const name = pm.variables.replaceIn('{{$randomFullName}}');\r",
													"pm.collectionVariables.set(\"randomName\", name);\r",
													"const email = pm.variables.replaceIn('{{$randomExampleEmail}}');\r",
													"pm.collectionVariables.set(\"randomEmail\", email);\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get('baseUrl') + '/usuarios',\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json'\r",
													"      },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": pm.collectionVariables.get('randomName'),\r",
													"            \"email\": pm.collectionVariables.get('randomEmail'),\r",
													"            \"password\": pm.collectionVariables.get('validPassword'),\r",
													"            \"administrador\": \"false\"\r",
													"        })\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"            console.error(err);\r",
													"            return;\r",
													"    }\r",
													"\r",
													"    pm.sendRequest({\r",
													"        url: pm.environment.get('baseUrl') + '/login',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'Accept': 'application/json',\r",
													"            'Content-Type': 'application/json'\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'raw',\r",
													"            raw: JSON.stringify({\r",
													"                \"email\": pm.collectionVariables.get('randomEmail'),\r",
													"                \"password\": pm.collectionVariables.get('validPassword')\r",
													"            })\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) {\r",
													"            console.error(err);\r",
													"            return;\r",
													"        }\r",
													"\r",
													"        pm.collectionVariables.set('token', res.json().authorization);\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Não foi encontrado carrinho para esse usuário\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/carrinhos/cancelar-compra",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"carrinhos",
												"cancelar-compra"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT_106: Cancelar compra sem autenticação",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/carrinhos/cancelar-compra",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"carrinhos",
												"cancelar-compra"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": "",
			"type": "string"
		},
		{
			"key": "adminEmail",
			"value": "fulano@qa.com",
			"type": "string"
		},
		{
			"key": "adminPassword",
			"value": "teste",
			"type": "string"
		},
		{
			"key": "adminId",
			"value": "0uxuPY0cbmQhpEz1",
			"type": "string"
		},
		{
			"key": "defaultProductId",
			"value": "BeeJh5lz3k6kSIzA",
			"type": "string"
		},
		{
			"key": "defaultProductName",
			"value": "Logitech MX Vertical",
			"type": "string"
		},
		{
			"key": "defaultCartId",
			"value": "qbMqntef4iTOwWfg",
			"type": "string"
		},
		{
			"key": "validPassword",
			"value": ""
		},
		{
			"key": "shortPassword",
			"value": ""
		},
		{
			"key": "longPassword",
			"value": ""
		},
		{
			"key": "randomName",
			"value": ""
		},
		{
			"key": "randomEmail",
			"value": ""
		},
		{
			"key": "newUserId",
			"value": ""
		},
		{
			"key": "newProductId",
			"value": "",
			"type": "string"
		},
		{
			"key": "randomProductName",
			"value": ""
		},
		{
			"key": "randomProductPrice",
			"value": ""
		},
		{
			"key": "randomProductDescription",
			"value": ""
		},
		{
			"key": "randomProductQuantity",
			"value": ""
		}
	]
}